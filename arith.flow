import lingo/pegcode/driver;

export {
	ArExpr ::= ArSum, ArMult, ArInt;
		ArSum(lhs : ArExpr, rhs : ArExpr);
		ArMult(lhs : ArExpr, rhs : ArExpr);
		ArInt(val : int);
		

	ar2s(e : ArExpr) -> string {
		switch (e) {
			ArSum(lhs, rhs): "(" + ar2s(lhs) + " + " + ar2s(rhs) + ")";
			ArMult(lhs, rhs): "(" + ar2s(lhs) + " * " + ar2s(rhs) + ")";
			ArInt(val): i2s(val);
		}
	}

	ar2i(e : ArExpr) -> int {
		switch (e) {
			ArSum(lhs, rhs): ar2i(lhs) + ar2i(rhs);
			ArMult(lhs, rhs): ar2i(lhs) * ar2i(rhs);
			ArInt(val): val;
		}
	}

	s2ar(str : string) -> ArExpr {
		e_gr = "#include lingo/arith.lingo";
		parsic(
			compilePegGrammar(e_gr), 
			str,
			SemanticActions(setTree(defaultPegActions.t, "createArInt", \s -> ArInt(s2i(s[0]))))
		)
	}
}

main(){
    expr = ArSum(ArInt(3),ArMult(ArInt(2),ArInt(5)));
    expr_str=ar2s(expr);
    println("expr: "+expr_str);
    ast=s2ar(expr_str);
    println("expr: "+ar2s(ast));
    //println("ast: "+ast);
    println("eval: "+i2s(ar2i(ast)));
}