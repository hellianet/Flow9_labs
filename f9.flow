import lingo/pegcode/driver;
Expr ::= Num, Sub, Add, Mult, Div, Pow, Log, Var,   Neg;
Num(number : double);
Sub(left : Expr, right : Expr);
Add(left : Expr, right : Expr);
Mult(left : Expr, right : Expr);
Div(left : Expr, right : Expr);
Pow(left : Expr, right : Expr);
Log(var : Expr);
Var(var : string);
Neg(expr: Expr);

ArRPN ::= OpRPN, ArgRPN, VarRPN;
	OpRPN ::= AddRPN, MultRPN, SubRPN, DivRPN, PowRPN, LogRPN, NegRPN;
	ArgRPN(val : double);
	VarRPN(var : string);
	AddRPN(); MultRPN(); SubRPN(); DivRPN(); PowRPN(); LogRPN(); NegRPN();

// Singleton keeping the compiled grammar

lingoGrammarOp : ref Maybe<[PegOp]> = ref None();
lingoGrammar() {
    // Prepare the grammar in the given file using flow syntax for inlining a string from a file
    // but be sure to only do this once
    onlyOnce(lingoGrammarOp, \ -> {
    compilePegGrammar("#include lingo.lingo");
    });
}


rpnToString(e : [ArRPN]) -> string {
	fold(e, "", \acc, r -> {
			switch(r) {
				ArgRPN(v): acc + d2s(v) + " ";
				AddRPN():  acc + "+ "; 
				MultRPN(): acc + "* ";
				SubRPN(): acc + "- ";
				DivRPN(): acc + "/ ";
				PowRPN(): acc + "^ ";
				LogRPN(): acc + "log ";
				NegRPN(): acc +"(-) ";
				VarRPN(x): acc + x + " ";
			}
		}
	)
}

calculateRpn(e : [ArRPN], variables : Tree<string, double>) -> Maybe<double> {
	apply_op = \op, stack -> {
		switch(stack) {
			Cons(v1, t1): {
				switch (op){
					LogRPN(): {
						if(v1>0.0){Some(Cons(log(v1), t1));} else {None();}
						}
					NegRPN(): Some(Cons(-v1, t1));
					default: {
						switch(t1) {
							Cons(v2, t2): {
								switch (op) {
									AddRPN(): Some(Cons(v1 + v2, t2));
									MultRPN(): Some(Cons(v1 * v2, t2));
									SubRPN(): Some(Cons(v2 - v1, t2));
									DivRPN(): {
										if(v1 != 0.0) {
											Some(Cons(v2 / v1, t2));
										} else {
											None();
										}
									}
									PowRPN(): {
										maybeBind(dpow2(v2, v1), \v-> {
											Some(Cons(v, t2));
										});
									}
									default: None();
								}
							}
							EmptyList(): None();
						}
					}
				}
			}
			EmptyList(): None();
		}
	}
	stack = fold(e, Some(makeList()), \acc, r -> {
			maybeBind(acc, \ac -> {
					switch(r) {
						ArgRPN(v): Some(Cons(v, ac));
						OpRPN(): apply_op(r, ac);
						VarRPN(name): maybeBind(lookupTree(variables,name),\v->{
							Some(Cons(v,ac));
						});
					}
				}
			)
		}
	);
	maybeBind(stack, \s ->
		switch (s) {
			Cons(v, t): if (t == EmptyList()) Some(v) else None();
			EmptyList(): None();
		}
	)
}

expressionToRpn(e : Expr) -> [ArRPN] {
	switch (e) {
		Add(l, r): concat(concat(expressionToRpn(l), expressionToRpn(r)), [AddRPN()]);
		Mult(l, r): concat(concat(expressionToRpn(l), expressionToRpn(r)), [MultRPN()]);
		Sub(l, r): concat(concat(expressionToRpn(l), expressionToRpn(r)), [SubRPN()]);
		Div(l, r): concat(concat(expressionToRpn(l), expressionToRpn(r)), [DivRPN()]);
		Pow(l, r): concat(concat(expressionToRpn(l), expressionToRpn(r)), [PowRPN()]);
		Log(l): concat(expressionToRpn(l),[LogRPN()]);
		Neg(l): concat(expressionToRpn(l),[NegRPN()]);
		Var(v): [VarRPN(v)];
		Num(v): [ArgRPN(v)];
	}
}

rpnToExpression(e : [ArRPN]) -> Maybe<Expr> {
	apply_op = \op, stack -> {
		switch(stack) {
			Cons(v1, t1): {
				switch (op) {
					LogRPN(): Some(Cons(Log(v1), t1));
					NegRPN(): Some(Cons(Neg(v1), t1));
					default:{
						switch(t1) {
							Cons(v2, t2): {
								switch (op) {
									AddRPN(): Some(Cons(Add(v2, v1), t2));
									SubRPN(): Some(Cons(Sub(v2, v1), t2));
									MultRPN(): Some(Cons(Mult(v2, v1), t2));
									DivRPN(): Some(Cons(Div(v2, v1), t2));
									PowRPN(): Some(Cons(Pow(v2, v1), t2));
									default: None();
								}
							}
							EmptyList(): None();
						}
					}
				}	
			}
			EmptyList(): None();
		}
	}
	stack = fold(e, Some(makeList()), \acc, r -> {
			maybeBind(acc, \ac -> {
					switch(r) {
						ArgRPN(v): Some(Cons(Num(v), ac));
						VarRPN(v): Some(Cons(Var(v),ac));
						OpRPN(): apply_op(r, ac);
					}
				}
			)
		}
	);
	maybeBind(stack, \s ->
		switch (s) {
			Cons(v, t): if (t == EmptyList()) Some(v) else None();
			EmptyList(): None();
		}
	)
}

stringToRpn(exprString : string) -> [ArRPN] {
    result = ref [];
    strSplitIterate(exprString, " ", \ token -> {
        if (isDouble(token)) {
            refArrayPush(result, ArgRPN(s2d(token)));
        } else if (token == "") {
            // skip
        } else if (token == "+") {
            refArrayPush(result, AddRPN());
        } else if (token == "-") {
            refArrayPush(result, SubRPN());
        } else if (token == "*") {
            refArrayPush(result, MultRPN());
        } else if (token == "/") {
            refArrayPush(result, DivRPN());
        } else if (token == "^") {
            refArrayPush(result, PowRPN());
        } else if (token == "log") {
            refArrayPush(result, LogRPN());
        } else if (token == "(-)") {
			refArrayPush(result, NegRPN());
		} else {
            refArrayPush(result, VarRPN(token));
        }
    });
    
   ^result;
}

getVariables() -> Tree<string, double> {
	parameters_array = getAllUrlParametersArray();
	fold(parameters_array, makeTree(),\ tree, parameter-> {
			setTree(tree, parameter[0], s2d(parameter[1]))
		}
	);
}

printValue(value : Maybe<double>){
    switch (value) {
        Some(v) : println("Calculated value: " + d2s(v));
        None() : println("Could not calculate " + " value");
    }
}

astToExpressionString(expr: Expr)->string{
    switch(expr){
        Sub(l, r) :   "(" + astToExpressionString(l) + "-" + astToExpressionString(r) + ")";
        Div(l, r) :   "(" + astToExpressionString(l) + "/" + astToExpressionString(r) + ")";
        Mult(l, r) :  "(" + astToExpressionString(l) + "*" + astToExpressionString(r) + ")";
        Add(l, r) :   "(" + astToExpressionString(l) + "+" + astToExpressionString(r) + ")";
        Num(number) : d2s(number);
        Var(v):       v;
        Pow(l, r) :   "(" + astToExpressionString(l) + "^" + astToExpressionString(r) + ")";
        Log(v) :      "log("                               + astToExpressionString(v) + ")";
        Neg(v) :      "(-"                               + astToExpressionString(v) + ")";
    }
}


main() {

    variables = getVariables();

	if (isUrlParameterSet("rpn")) {
		expr = getUrlParameter("rpn");
		println("RPN: " + expr);
		rpn = stringToRpn(expr);
		println("RPN to string: " + rpnToString(rpn));
		ast = rpnToExpression(rpn);
		switch(ast) {
			Some(ex): println("RPN to expression " + astToExpressionString(ex));
			None(): println("Failed to convert from RPN to expression");
		}
		printValue(calculateRpn(rpn,variables));
	}

	println("");

	if (isUrlParameterSet("expression")) {
		expr = getUrlParameter("expression");
		result = parsic(lingoGrammar(), expr, defaultPegActions);
		println("Expression:" + expr);
		rpn = expressionToRpn(result);
		println("RPN: " + rpnToString(rpn));
		ast = rpnToExpression(rpn);
		switch(ast){
			Some(ex): println("RPN to expression " + astToExpressionString(ex));
			None(): println("Failed to convert from RPN to expression");
		}
		printValue(calculateRpn(rpn, variables));
	}
    
    quit(0);
}