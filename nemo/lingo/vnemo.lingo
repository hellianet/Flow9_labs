prog = ws decl*:d stat+:b { VNemoProgram(:d, :b)};
decl = "var" ws id:v ":" ws type:t ";" ws { NemoDeclaration(:v, :t) };

type  = int | array;
int   = "int" ws { NemoIntType() };
array = "[" ws type:t "]" ws { NemoArrType(:t) };

stat   = intval ":" ws (print | assign | ifelse);
print  = "print" ws "(" ws expr:e ")" ws goto:gt { VNemoPrint(:e, :gt) };
assign = id:v ":=" ws expr:e goto:gt ws  { VNemoAssign(:v, :e, :gt) };
ifelse = "if" ws "(" ws expr:e1 cond$s ws expr:e2 ")" ws goto:pos "else" ws goto:neg { VNemoIf($s, :e1, :e2, :pos, :neg) };
goto   = "goto" ws "{" ws label*:labs "}" ws { :labs };

expr   = const | bin_op | un_op | apply | update | arr | var;
bin_op = "(" ws expr:l ("+"|"*"|"/"|"-"|"%") $s ws expr:r ")" ws { NemoBinOp($s, :l, :r) };
un_op  = "-" $s ws expr:e { NemoUnOp($s, :e) };
apply  = "app" ws "(" ws expr:a "," ws expr:i ")" ws { NemoApp(:a, :i) };
update = "upd" ws "(" ws expr:a "," ws expr:i "," ws expr:v ")" ws { NemoUpd(:a, :i, :v) };
arr    = "[" ws expr:v1 arrval*:vs "]" ws { createArray(:v1, :vs) };
arrval = "," ws expr;
var    = id:v { NemoVar(:v) };
const  = intval:v { NemoInt(:v) };
cond   = "!=" | "==" | "<=" | ">=" | "<" | ">" ;

intval = digit+ $s ws { s2i($s) };
id     = letter+ $s ws { $s };
label  = digit+ $s ws { s2i($s) };

letter = 'a'-'z';
digit  = '0'-'9';
sp = (' ' | '\t' | '\n' | '\r')+;
ws = (' ' | '\t' | '\n' | '\r')*;
